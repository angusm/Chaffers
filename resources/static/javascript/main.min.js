!function(){angular.module("djangular",["ngCookies"])}(),function(){angular.module("handies",[])}(),function(){angular.module("backendModels",["handies"])}(),function(){angular.module("chaffers",["backendModels","handies","djangular"])}(),function(){function abilityModifier(){var directive={restrict:"E",scope:{abilityModifier:"="},controller:function(){},controllerAs:"abilityModifierVM",bindToController:!0,templateUrl:"/static/javascript/chaffers/ability_modifier_display/ability_modifier.html"};return directive}angular.module("chaffers").directive("abilityModifier",abilityModifier)}(),function(){function attributeModifier(){var directive={restrict:"E",scope:{attributeModifier:"="},controller:function(){},controllerAs:"attributeModifierVM",bindToController:!0,templateUrl:"/static/javascript/chaffers/attribute_modifier_display/attribute_modifier.html"};return directive}angular.module("chaffers").directive("attributeModifier",attributeModifier)}(),function(){function characterLinkFromData(){function controller(createPopulatedInstance,Character){this.character=createPopulatedInstance(Character,this.characterData)}var directive={restrict:"E",scope:{characterData:"="},controller:["createPopulatedInstance","Character",controller],controllerAs:"characterLinkFromDataVM",bindToController:!0,templateUrl:"/static/javascript/chaffers/character_link/from_data/character_link.html"};return directive}angular.module("chaffers").directive("characterLinkFromData",[characterLinkFromData])}(),function(){function characterLink(){var directive={restrict:"E",scope:{character:"="},controller:function(){},controllerAs:"characterLinkVM",bindToController:!0,templateUrl:"/static/javascript/chaffers/character_link/generic/character_link.html"};return directive}angular.module("chaffers").directive("characterLink",characterLink)}(),function(){function characterSheetFromData(){function controller(createPopulatedInstance,Character){this.character=createPopulatedInstance(Character,this.characterData)}var directive={restrict:"E",scope:{characterData:"="},controller:["createPopulatedInstance","Character",controller],controllerAs:"characterSheetFromDataVM",bindToController:!0,templateUrl:"/static/javascript/chaffers/character_sheet/from_data/character_sheet_from_data.html"};return directive}angular.module("chaffers").directive("characterSheetFromData",[characterSheetFromData])}(),function(){function characterSheetFromId(){function CharacterSheetFromIdController(CharacterDataService){var vm=this;CharacterDataService.getCharacterById(vm.characterId).then(setCharacter.bind(vm))}function setCharacter(character){this.character=character}var directive={restrict:"E",scope:{characterId:"="},controller:CharacterSheetFromIdController,controllerAs:"characterSheetFromIdVM",bindToController:!0,templateUrl:"/static/javascript/chaffers/character_sheet/from_id/character_sheet_from_id.html"};return CharacterSheetFromIdController.$inject=["CharacterDataService"],CharacterSheetFromIdController.prototype.setCharacter=setCharacter,directive}angular.module("chaffers").directive("characterSheetFromId",characterSheetFromId)}(),function(){function characterSheet(){var directive={restrict:"E",scope:{character:"=",abilities:"="},controller:function(){},controllerAs:"characterSheetVM",bindToController:!0,templateUrl:"/static/javascript/chaffers/character_sheet/generic/character_sheet.html"};return directive}angular.module("chaffers").directive("characterSheet",characterSheet)}(),function(){function flaw(){var directive={restrict:"E",scope:{flaw:"="},controller:function(){},controllerAs:"flawVM",bindToController:!0,templateUrl:"/static/javascript/chaffers/character_trait_display/flaw/flaw.html"};return directive}angular.module("chaffers").directive("flaw",flaw)}(),function(){function characterTrait(){var directive={restrict:"E",scope:{characterTrait:"="},templateUrl:"/static/javascript/chaffers/character_trait_display/generic/character_trait.html",controller:function(){},controllerAs:"characterTraitVM",bindToController:!0};return directive}angular.module("chaffers").directive("characterTrait",characterTrait)}(),function(){function specialty(){var directive={restrict:"E",scope:{specialty:"="},templateUrl:"/static/javascript/chaffers/character_trait_display/specialty/specialty.html",controller:function(){},controllerAs:"specialtyVM",bindToController:!0};return directive}angular.module("chaffers").directive("specialty",specialty)}(),function(){function CharacterDataService(djangoHTTP,Character,createPopulatedInstance){function getCharacterById(characterId){return djangoHTTP.post("/characters/get_character_data_by_id",{character_id:characterId}).then(getCharacterFromPostResult)}function getCharacterFromPostResult(postResult){return getCharacterFromCharacterData(postResult.data.character_data)}function getCharacterFromCharacterData(characterData){return createPopulatedInstance(Character,characterData)}return{getCharacterById:getCharacterById}}angular.module("chaffers").factory("CharacterDataService",CharacterDataService),CharacterDataService.$inject=["djangoHTTP","Character","createPopulatedInstance"]}(),function(){function baseModelFactory(){function BaseModel(){}return BaseModel}angular.module("backendModels").factory("BaseModel",[baseModelFactory])}(),function(){function caseTransformFactory(){function snakeCaseToCamelCase(snakeCaseString){function transformSnakeCaseMatchToCamelCase(snakeCaseMatch){var matchedString=snakeCaseMatch[1];return matchedString.toUpperCase()}return snakeCaseString.replace(/(_\w)/g,transformSnakeCaseMatchToCamelCase)}function camelCaseToSnakeCase(camelCaseString){throw new Error("You should really implement this function bud!")}return{snakeCaseToCamelCase:snakeCaseToCamelCase,camelCaseToSnakeCase:camelCaseToSnakeCase}}angular.module("backendModels").factory("caseTransform",caseTransformFactory)}(),function(){function createPopulatedInstanceFactory(populateInstance){function createPopulatedInstance(ClassToUse,dataForPopulation){var createdInstance=new ClassToUse;return populateInstance(createdInstance,dataForPopulation),createdInstance}return createPopulatedInstance}angular.module("backendModels").factory("createPopulatedInstance",["populateInstance",createPopulatedInstanceFactory])}(),function(){function createPopulatedInstancesFactory(populateInstance){function createPopulatedInstances(ClassToUse,dataForPopulation){var createdInstances=[];return dataForPopulation.forEach(function(data){createdInstances.push(createPopulatedInstance(ClassToUse,data))}),createdInstances}return createPopulatedInstances}angular.module("backendModels").factory("createPopulatedInstances",["createPopulatedInstance",createPopulatedInstancesFactory])}(),function(){function extendFactory(){function extend(ChildClass,ParentClass){ChildClass.prototype=Object.create(ParentClass.prototype),ChildClass.prototype.constructor=ChildClass}return extend}angular.module("backendModels").factory("extend",extendFactory)}(),function(){function populateInstanceFactory(relationManager,caseTransform){function populateInstance(instanceToPopulate,dataForPopulation){if("object"!=typeof dataForPopulation)throw new Error("Data for population must be an object");var dataKeys=Object.keys(dataForPopulation);dataKeys.forEach(function(dataKey){var camelCasedKey=caseTransform.snakeCaseToCamelCase(dataKey),data=dataForPopulation[dataKey];(instanceToPopulate.constructor.prototype.hasOwnProperty(camelCasedKey)||instanceToPopulate.hasOwnProperty(camelCasedKey))&&(relationManager.isHasOneRelation(instanceToPopulate,camelCasedKey)?populateHasOneRelation(instanceToPopulate,camelCasedKey,data):relationManager.isHasManyRelation(instanceToPopulate,camelCasedKey)?populateHasManyRelation(instanceToPopulate,camelCasedKey,data):instanceToPopulate[camelCasedKey]=data)})}function populateHasManyRelation(instanceToPopulate,propertyString,dataValues){"object"==typeof dataValues&&(instanceToPopulate[propertyString]=[],dataValues.forEach(function(dataValue){var relationInstance=getRelationInstance(instanceToPopulate,propertyString,dataValue);instanceToPopulate[propertyString].push(relationInstance)}))}function populateHasOneRelation(instanceToPopulate,propertyString,data){if("object"==typeof data){var relationInstance=getRelationInstance(instanceToPopulate,propertyString,data);instanceToPopulate[propertyString]=relationInstance}}function getRelationInstance(instanceToPopulate,propertyString,data){var RelationClass=relationManager.getRelationClass(instanceToPopulate,propertyString),relationInstance=new RelationClass;return populateInstance(relationInstance,data),relationInstance}return populateInstance}angular.module("chaffers").factory("populateInstance",["relationManager","caseTransform",populateInstanceFactory])}(),function(){function RelationFactory(){function Relation(relatedClass,relationType){this.setRelatedClass(relatedClass),this.setRelationType(relationType)}function getRelatedClass(relatedClass){return this.relatedClass}function setRelatedClass(relatedClass){this.relatedClass=relatedClass}function setRelationType(relationType){this.relationType=relationType}function isHasOneRelation(){return this.relationType===Relation.TYPES.HAS_ONE}function isHasManyRelation(){return this.relationType===Relation.TYPES.HAS_MANY}return Relation.TYPES={},Relation.TYPES.HAS_MANY="HAS_MANY",Relation.TYPES.HAS_ONE="HAS_ONE",Relation.prototype.relatedClass=void 0,Relation.prototype.relationType=void 0,Relation.prototype.isHasOneRelation=isHasOneRelation,Relation.prototype.isHasManyRelation=isHasManyRelation,Relation.prototype.setRelatedClass=setRelatedClass,Relation.prototype.setRelationType=setRelationType,Relation.prototype.getRelatedClass=getRelatedClass,Relation}angular.module("backendModels").factory("Relation",RelationFactory)}(),function(){function RelationManagerFactory(Relation,getFirstDefined,getParentClass){function RelationManager(){this.relationsString="__RelationManager__relations_"+(new Date).getTime()}function isHasOneRelation(valueToCheck,propertyString){return"function"==typeof valueToCheck?this.isHasOneRelationPropertyOnClass(valueToCheck,propertyString):this.isHasOneRelationPropertyOnInstance(valueToCheck,propertyString)}function isHasManyRelation(valueToCheck,propertyString){return"function"==typeof valueToCheck?this.isHasManyRelationPropertyOnClass(valueToCheck,propertyString):this.isHasManyRelationPropertyOnInstance(valueToCheck,propertyString)}function isHasOneRelationPropertyOnInstance(instanceToCheck,propertyString){var instanceClass=instanceToCheck.constructor;return this.isHasOneRelationPropertyOnClass(instanceClass,propertyString)}function isHasOneRelationPropertyOnClass(classToCheck,propertyString){if(!this.isRelationOnClass(classToCheck,propertyString))return!1;var relation=this.getRelation(classToCheck,propertyString);return relation.isHasOneRelation()}function isHasManyRelationPropertyOnInstance(instanceToCheck,propertyString){var instanceClass=instanceToCheck.constructor;return this.isHasManyRelationPropertyOnClass(instanceClass,propertyString)}function isHasManyRelationPropertyOnClass(classToCheck,propertyString){if(!this.isRelationOnClass(classToCheck,propertyString))return!1;var relation=this.getRelation(classToCheck,propertyString);return relation.isHasManyRelation()}function isRelationOnClass(classToCheck,propertyString){var relations=this.getRelations(classToCheck);return"object"==typeof relations[propertyString]}function registerRelation(primaryClass,relationProperty,relationClass,relationType){var primaryClassRelations=this.getDirectRelations(primaryClass);if("undefined"!=typeof primaryClassRelations[relationProperty])throw new Error("Cannot override relation.");primaryClassRelations[relationProperty]=new Relation(relationClass,relationType)}function registerHasOneRelation(primaryClass,relationProperty,relationClass){this.registerRelation(primaryClass,relationProperty,relationClass,Relation.TYPES.HAS_ONE)}function registerHasManyRelation(primaryClass,relationProperty,relationClass){this.registerRelation(primaryClass,relationProperty,relationClass,Relation.TYPES.HAS_MANY)}function getDirectRelations(classToCheck){return"undefined"==typeof classToCheck[this.relationsString]&&(classToCheck[this.relationsString]={}),classToCheck[this.relationsString]}function getRelations(thingToCheck){return"function"==typeof thingToCheck?this.getRelationsFromClass(thingToCheck):this.getRelationsFromClass(thingToCheck.constructor)}function getRelationsFromClass(classToCheck,childRelations){var relationsToReturn=getFirstDefined(childRelations,{}),directRelations=this.getDirectRelations(classToCheck);Object.keys(directRelations).forEach(function(propertyString){relationsToReturn[propertyString]=getFirstDefined(relationsToReturn[propertyString],directRelations[propertyString])});var parentClass=getParentClass(classToCheck);return parentClass!==Object?this.getRelationsFromClass(parentClass,relationsToReturn):relationsToReturn}function getRelation(thingToCheck,propertyString){return this.getRelations(thingToCheck)[propertyString]}function getRelationClass(thingToCheck,propertyString){return this.getRelation(thingToCheck,propertyString).getRelatedClass()}return RelationManager.prototype.isHasManyRelationPropertyOnInstance=isHasManyRelationPropertyOnInstance,RelationManager.prototype.isHasManyRelationPropertyOnClass=isHasManyRelationPropertyOnClass,RelationManager.prototype.isHasOneRelationPropertyOnInstance=isHasOneRelationPropertyOnInstance,RelationManager.prototype.isHasOneRelationPropertyOnClass=isHasOneRelationPropertyOnClass,RelationManager.prototype.isHasManyRelation=isHasManyRelation,RelationManager.prototype.isHasOneRelation=isHasOneRelation,RelationManager.prototype.registerRelation=registerRelation,RelationManager.prototype.getRelations=getRelations,RelationManager.prototype.isRelationOnClass=isRelationOnClass,RelationManager.prototype.getRelation=getRelation,RelationManager.prototype.getRelationClass=getRelationClass,RelationManager.prototype.getRelationsFromClass=getRelationsFromClass,RelationManager.prototype.registerHasOneRelation=registerHasOneRelation,RelationManager.prototype.registerHasManyRelation=registerHasManyRelation,RelationManager.prototype.getDirectRelations=getDirectRelations,new RelationManager}angular.module("chaffers").factory("relationManager",["Relation","getFirstDefined","getParentClass",RelationManagerFactory])}(),function(){function AbilityModifierFactory(BaseModel,extend){function AbilityModifier(){this.displayName=void 0,this.modifier=void 0,BaseModel.apply(this,arguments)}function getModifier(){return this.modifier}function getDisplayName(){return this.displayName}return extend(AbilityModifier,BaseModel),AbilityModifier.prototype.getModifier=getModifier,AbilityModifier.prototype.getDisplayName=getDisplayName,AbilityModifier}angular.module("chaffers").factory("AbilityModifier",["BaseModel","extend",AbilityModifierFactory])}(),function(){function AttributeModifierFactory(BaseModel,extend){function AttributeModifier(){this.displayName=void 0,this.modifier=void 0,BaseModel.apply(this,arguments)}function getModifier(){return this.modifier}function getDisplayName(){return this.displayName}return extend(AttributeModifier,BaseModel),AttributeModifier.prototype.getModifier=getModifier,AttributeModifier.prototype.getDisplayName=getDisplayName,AttributeModifier}angular.module("chaffers").factory("AttributeModifier",["BaseModel","extend",AttributeModifierFactory])}(),function(){function CharacterFactory(Specialty,Flaw,BaseModel,relationManager,extend,TextBlock){function Character(){this.id=void 0,this.specialties=void 0,this.flaws=void 0,this.description=void 0,this.displayName=void 0,BaseModel.apply(this,arguments)}function getDisplayName(){return this.displayName}function getCharacterSheetURL(){return"/characters/view/"+this.id}function getDescription(){return"undefined"==typeof this.description?"":this.description.getText()}function getFlaws(){return this.flaws}function getSpecialties(){return this.specialties}return extend(Character,BaseModel),Character.prototype.getDisplayName=getDisplayName,Character.prototype.getFlaws=getFlaws,Character.prototype.getSpecialties=getSpecialties,Character.prototype.getDescription=getDescription,Character.prototype.getCharacterSheetURL=getCharacterSheetURL,relationManager.registerHasManyRelation(Character,"flaws",Flaw),relationManager.registerHasManyRelation(Character,"specialties",Specialty),relationManager.registerHasOneRelation(Character,"description",TextBlock),Character}angular.module("chaffers").factory("Character",["Specialty","Flaw","BaseModel","relationManager","extend","TextBlock",CharacterFactory])}(),function(){function characterTraitFactory(BaseModel,extend,relationManager,TextBlock,AttributeModifier,AbilityModifier){function CharacterTrait(){this.displayName=void 0,this.description=void 0,this.attributeModifiers=void 0,this.abilityModifiers=void 0,BaseModel.apply(this,arguments)}function getDisplayName(){return this.displayName}function getDescription(){return"undefined"==typeof this.description?"":this.description.getText()}function getAbilityModifiers(){return this.abilityModifiers}function getAttributeModifiers(){return this.attributeModifiers}return extend(CharacterTrait,BaseModel),relationManager.registerHasOneRelation(CharacterTrait,"description",TextBlock),relationManager.registerHasManyRelation(CharacterTrait,"attributeModifiers",AttributeModifier),relationManager.registerHasManyRelation(CharacterTrait,"abilityModifiers",AbilityModifier),CharacterTrait.prototype.getDisplayName=getDisplayName,CharacterTrait.prototype.getDescription=getDescription,CharacterTrait.prototype.getAbilityModifiers=getAbilityModifiers,CharacterTrait.prototype.getAttributeModifiers=getAttributeModifiers,CharacterTrait}angular.module("chaffers").factory("CharacterTrait",["BaseModel","extend","relationManager","TextBlock","AttributeModifier","AbilityModifier",characterTraitFactory])}(),function(){function flawFactory(CharacterTrait,extend){function Flaw(){CharacterTrait.apply(this,arguments)}return extend(Flaw,CharacterTrait),Flaw}angular.module("chaffers").factory("Flaw",["CharacterTrait","extend",flawFactory])}(),function(){function specialtyFactory(CharacterTrait,extend){function Specialty(){CharacterTrait.apply(this,arguments)}return extend(Specialty,CharacterTrait),Specialty}angular.module("chaffers").factory("Specialty",["CharacterTrait","extend",specialtyFactory])}(),function(){function TextBlockFactory(BaseModel,extend){function TextBlock(){this.formattedText=void 0}function getText(){return this.formattedText}return extend(TextBlock,BaseModel),TextBlock.prototype.getText=getText,TextBlock}angular.module("chaffers").factory("TextBlock",["BaseModel","extend",TextBlockFactory])}(),function(){function csrfService($cookies){function getCSRFToken(){return $cookies.get("csrftoken")}return{getCSRFToken:getCSRFToken}}angular.module("djangular").factory("csrfService",csrfService),csrfService.$inject=["$cookies"]}(),function(){function djangoHTTPFactory(csrfService,$http){return $http.defaults.headers.post["X-CSRFToken"]=csrfService.getCSRFToken(),$http}angular.module("djangular").factory("djangoHTTP",["csrfService","$http",djangoHTTPFactory])}(),function(){function getFirstDefinedFactory(){function getFirstDefined(){for(var i=0;i<arguments.length;i++)if("undefined"!=typeof arguments[i])return arguments[i]}return getFirstDefined}angular.module("handies").factory("getFirstDefined",getFirstDefinedFactory)}(),function(){function getParentClassFactory(){function getParentClass(classToCheck){return classToCheck.prototype.__proto__.constructor}return getParentClass}angular.module("handies").factory("getParentClass",getParentClassFactory)}(),function(){function isArrayFactory(){function isArray(value){return"object"==typeof value&&"number"==typeof value.length}return isArray}angular.module("handies").factory("isArray",isArrayFactory)}();